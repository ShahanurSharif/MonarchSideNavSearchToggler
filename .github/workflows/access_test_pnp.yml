trigger: none

pool:
  vmImage: 'windows-latest'

variables:
  siteUrl: 'https://monarch360demo.sharepoint.com/sites/shan'
  uploadFolder: 'SiteAssets'
  clientId: ${clientId}
  tenantId: ${tenantId}
  clientSecret: ${clientSecret}  # Replace with actual secret

steps:
- checkout: self

- task: PowerShell@2
  displayName: 'Install PnP PowerShell'
  inputs:
    targetType: 'inline'
    pwsh: true
    script: |
      Install-Module -Name PnP.PowerShell -Force -AllowClobber -Scope CurrentUser
      Import-Module PnP.PowerShell

- task: PowerShell@2
  displayName: 'Test SharePoint Authentication'
  inputs:
    targetType: 'inline'
    pwsh: true
    script: |
      try {
        Connect-PnPOnline -Url "$(siteUrl)" `
          -ClientId "$(clientId)" `
          -ClientSecret "$(clientSecret)"
        Write-Host "‚úÖ Authentication successful"
      }
      catch {
        Write-Host "‚ùå Authentication failed: $($_.Exception.Message)"
        exit 1
      }

- task: PowerShell@2
  displayName: 'Download JSON from SharePoint'
  inputs:
    targetType: 'inline'
    pwsh: true
    script: |
      try {
        Connect-PnPOnline -Url "$(siteUrl)" `
          -ClientId "$(clientId)" `
          -ClientSecret "$(clientSecret)"

        Get-PnPFile -Url "https://monarch360demo.sharepoint.com/sites/shan/SiteAssets/monarchNavConfig.json" `
          -Path "." `
          -FileName "monarchNavConfig.json" `
          -AsFile `
          -Force

        Write-Host "‚úÖ Successfully downloaded monarchNavConfig.json"
      }
      catch {
        Write-Host "‚ùå Failed to download JSON: $($_.Exception.Message)"
        exit 1
      }

- task: PowerShell@2
  displayName: 'Echo Upload Step'
  inputs:
    targetType: 'inline'
    pwsh: true
    script: |
      Write-Host "üì§ Simulating upload of updated monarchNavConfig.json to SharePoint"